/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as SessionsIndexImport } from './routes/sessions/index'
import { Route as SessionsIdImport } from './routes/sessions/$id'

// Create Virtual Routes

const KnowledgeLazyImport = createFileRoute('/knowledge')()

// Create/Update Routes

const KnowledgeLazyRoute = KnowledgeLazyImport.update({
  id: '/knowledge',
  path: '/knowledge',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/knowledge.lazy').then((d) => d.Route))

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SessionsIndexRoute = SessionsIndexImport.update({
  id: '/sessions/',
  path: '/sessions/',
  getParentRoute: () => rootRoute,
} as any)

const SessionsIdRoute = SessionsIdImport.update({
  id: '/sessions/$id',
  path: '/sessions/$id',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/knowledge': {
      id: '/knowledge'
      path: '/knowledge'
      fullPath: '/knowledge'
      preLoaderRoute: typeof KnowledgeLazyImport
      parentRoute: typeof rootRoute
    }
    '/sessions/$id': {
      id: '/sessions/$id'
      path: '/sessions/$id'
      fullPath: '/sessions/$id'
      preLoaderRoute: typeof SessionsIdImport
      parentRoute: typeof rootRoute
    }
    '/sessions/': {
      id: '/sessions/'
      path: '/sessions'
      fullPath: '/sessions'
      preLoaderRoute: typeof SessionsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/knowledge': typeof KnowledgeLazyRoute
  '/sessions/$id': typeof SessionsIdRoute
  '/sessions': typeof SessionsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/knowledge': typeof KnowledgeLazyRoute
  '/sessions/$id': typeof SessionsIdRoute
  '/sessions': typeof SessionsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/knowledge': typeof KnowledgeLazyRoute
  '/sessions/$id': typeof SessionsIdRoute
  '/sessions/': typeof SessionsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/knowledge' | '/sessions/$id' | '/sessions'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/knowledge' | '/sessions/$id' | '/sessions'
  id: '__root__' | '/' | '/knowledge' | '/sessions/$id' | '/sessions/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  KnowledgeLazyRoute: typeof KnowledgeLazyRoute
  SessionsIdRoute: typeof SessionsIdRoute
  SessionsIndexRoute: typeof SessionsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  KnowledgeLazyRoute: KnowledgeLazyRoute,
  SessionsIdRoute: SessionsIdRoute,
  SessionsIndexRoute: SessionsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/knowledge",
        "/sessions/$id",
        "/sessions/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/knowledge": {
      "filePath": "knowledge.lazy.tsx"
    },
    "/sessions/$id": {
      "filePath": "sessions/$id.tsx"
    },
    "/sessions/": {
      "filePath": "sessions/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
